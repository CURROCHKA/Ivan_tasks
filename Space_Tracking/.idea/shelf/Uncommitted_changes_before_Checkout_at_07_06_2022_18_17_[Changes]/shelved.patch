Index: ../mineswapper/.idea/mineswapper.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../mineswapper/.idea/mineswapper.iml b/../mineswapper/.idea/mineswapper.iml
new file mode 100644
--- /dev/null	
+++ b/../mineswapper/.idea/mineswapper.iml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ../Tic-Tac-Toe/game_stats.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>class GameStats:\r\n    def __init__(self, t_game):\r\n        self.buttons = t_game.buttons\r\n        self.reset_stats()\r\n        self.game_active = False\r\n\r\n    def reset_stats(self):\r\n        self.topleft_active = True\r\n        self.topleft_who = ''\r\n\r\n        self.center_active = True\r\n        self.center_who = ''\r\n\r\n        self.topright_active = True\r\n        self.topright_who = ''\r\n\r\n        self.top_active = True\r\n        self.top_who = ''\r\n\r\n        self.left_active = True\r\n        self.left_who = ''\r\n\r\n        self.bottomleft_active = True\r\n        self.bottomleft_who = ''\r\n\r\n        self.bottom_active = True\r\n        self.bottom_who = ''\r\n\r\n        self.bottomright_active = True\r\n        self.bottomright_who = ''\r\n\r\n        self.right_active = True\r\n        self.right_who = ''\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Tic-Tac-Toe/game_stats.py b/../Tic-Tac-Toe/game_stats.py
--- a/../Tic-Tac-Toe/game_stats.py	
+++ b/../Tic-Tac-Toe/game_stats.py	
@@ -5,29 +5,6 @@
         self.game_active = False
 
     def reset_stats(self):
-        self.topleft_active = True
-        self.topleft_who = ''
-
-        self.center_active = True
-        self.center_who = ''
-
-        self.topright_active = True
-        self.topright_who = ''
-
-        self.top_active = True
-        self.top_who = ''
-
-        self.left_active = True
-        self.left_who = ''
-
-        self.bottomleft_active = True
-        self.bottomleft_who = ''
-
-        self.bottom_active = True
-        self.bottom_who = ''
-
-        self.bottomright_active = True
-        self.bottomright_who = ''
-
-        self.right_active = True
-        self.right_who = ''
+        for i in self.buttons:
+            self.buttons[i].button_active = True
+            self.buttons[i].who = ''
Index: ../Tic-Tac-Toe/temp.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>'''stats_button = {'topleft': [self.buttons['topleft_button'].button_rect.collidepoint(mouse_pos),\r\n                                    self.settings.topleft_who, self.settings.topleft_active],\r\n                        'top': [self.buttons['top_button'].button_rect.collidepoint(mouse_pos),\r\n                                self.settings.top_who, self.settings.top_active],\r\n                        'topright': [self.buttons['topright_button'].button_rect.collidepoint(mouse_pos),\r\n                                     self.settings.topright_who, self.settings.topright_active],\r\n                        'left': [self.buttons['left_button'].button_rect.collidepoint(mouse_pos),\r\n                                 self.settings.left_who, self.settings.left_active],\r\n                        'center': [self.buttons['center_button'].button_rect.collidepoint(mouse_pos),\r\n                                   self.settings.center_who, self.settings.center_active],\r\n                        'right': [self.buttons['right_button'].button_rect.collidepoint(mouse_pos),\r\n                                  self.settings.right_who, self.settings.right_active],\r\n                        'bottomleft': [self.buttons['bottomleft_button'].button_rect.collidepoint(mouse_pos),\r\n                                       self.settings.bottomright_who, self.settings.bottomright_active],\r\n                        'bottom': [self.buttons['bottom_button'].button_rect.collidepoint(mouse_pos),\r\n                                   self.settings.bottom_who, self.settings.bottom_active],\r\n                        'bottomright': [self.buttons['bottomright_button'].button_rect.collidepoint(mouse_pos),\r\n                                        self.settings.bottomleft_who, self.settings.bottomleft_active]}\r\n        for i in stats_button:\r\n            if stats_button[i][0] and stats_button[i][2]:\r\n                print(stats_button[i][0], stats_button[i][1], stats_button[i][2])\r\n                stats_button[i][1] = self.who\r\n                self.whose_move()\r\n                stats_button[i][2] = False\r\n                print(stats_button[i][0], stats_button[i][1], stats_button[i][2])\r\n                print(self.settings.bottomright_who, self.settings.bottomright_active)'''\r\n\r\n'''def check_mouse_events(self, mouse_pos):\r\n        topleft_clicked = self.buttons['topleft_button'].button_rect.collidepoint(mouse_pos)\r\n        top_clicked = self.buttons['top_button'].button_rect.collidepoint(mouse_pos)\r\n        topright_clicked = self.buttons['topright_button'].button_rect.collidepoint(mouse_pos)\r\n        left_clicked = self.buttons['left_button'].button_rect.collidepoint(mouse_pos)\r\n        center_clicked = self.buttons['center_button'].button_rect.collidepoint(mouse_pos)\r\n        right_clicked = self.buttons['right_button'].button_rect.collidepoint(mouse_pos)\r\n        bottomleft_clicked = self.buttons['bottomleft_button'].button_rect.collidepoint(mouse_pos)\r\n        bottom_clicked = self.buttons['bottom_button'].button_rect.collidepoint(mouse_pos)\r\n        bottomright_clicked = self.buttons['bottomright_button'].button_rect.collidepoint(mouse_pos)\r\n\r\n        # Topleft button\r\n        if topleft_clicked and self.settings.topleft_active:\r\n            self.settings.topleft_who = self.who\r\n            self.whose_move()\r\n            self.settings.topleft_active = False\r\n\r\n        # Center button\r\n        if center_clicked and self.settings.center_active:\r\n            self.settings.center_who = self.who\r\n            self.whose_move()\r\n            self.settings.center_active = False\r\n\r\n        # Topright button\r\n        if topright_clicked and self.settings.topright_active:\r\n            self.settings.topright_who = self.who\r\n            self.whose_move()\r\n            self.settings.topright_active = False\r\n\r\n        # Top button\r\n        if top_clicked and self.settings.top_active:\r\n            self.settings.top_who = self.who\r\n            self.whose_move()\r\n            self.settings.top_active = False\r\n\r\n        # Left button\r\n        if left_clicked and self.settings.left_active:\r\n            self.settings.left_who = self.who\r\n            self.whose_move()\r\n            self.settings.left_active = False\r\n\r\n        # Bottomleft button\r\n        if bottomleft_clicked and self.settings.bottomleft_active:\r\n            self.settings.bottomleft_who = self.who\r\n            self.whose_move()\r\n            self.settings.bottomleft_active = False\r\n\r\n        # Bottom button\r\n        if bottom_clicked and self.settings.bottom_active:\r\n            self.settings.bottom_who = self.who\r\n            self.whose_move()\r\n            self.settings.bottom_active = False\r\n\r\n        # Bottomright button\r\n        if bottomright_clicked and self.settings.bottomright_active:\r\n            self.settings.bottomright_who = self.who\r\n            self.whose_move()\r\n            self.settings.bottomright_active = False\r\n\r\n        # Right button\r\n        if right_clicked and self.settings.right_active:\r\n            self.settings.right_who = self.who\r\n            self.whose_move()\r\n            self.settings.right_active = False'''\r\n\r\n\r\n'''def buttons_update(self):\r\n    # Topleft button\r\n    if not self.settings.topleft_active:\r\n        if self.settings.topleft_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['topleft_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['topleft_button'].button_rect)\r\n\r\n    # Top button\r\n    if not self.settings.top_active:\r\n        if self.settings.top_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['top_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['top_button'].button_rect)\r\n\r\n    # Topright button\r\n    if not self.settings.topright_active:\r\n        if self.settings.topright_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['topright_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['topright_button'].button_rect)\r\n\r\n    # Left button\r\n    if not self.settings.left_active:\r\n        if self.settings.left_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['left_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['left_button'].button_rect)\r\n\r\n    # Center button\r\n    if not self.settings.center_active:\r\n        if self.settings.center_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['center_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['center_button'].button_rect)\r\n\r\n    # Right button\r\n    if not self.settings.right_active:\r\n        if self.settings.right_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['right_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['right_button'].button_rect)\r\n\r\n    # Bottomleft button\r\n    if not self.settings.bottomleft_active:\r\n        if self.settings.bottomleft_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['bottomleft_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['bottomleft_button'].button_rect)\r\n\r\n    # Bottom button\r\n    if not self.settings.bottom_active:\r\n        if self.settings.bottom_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['bottom_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['bottom_button'].button_rect)\r\n\r\n    # Bottomright button\r\n    if not self.settings.bottomright_active:\r\n        if self.settings.bottomright_who == self.zero:\r\n            self.screen.blit(self.zero.image, self.buttons['bottomright_button'].button_rect)\r\n        else:\r\n            self.screen.blit(self.cross.image, self.buttons['bottomright_button'].button_rect)'''\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Tic-Tac-Toe/temp.py b/../Tic-Tac-Toe/temp.py
--- a/../Tic-Tac-Toe/temp.py	
+++ b/../Tic-Tac-Toe/temp.py	
@@ -1,156 +1,219 @@
-'''stats_button = {'topleft': [self.buttons['topleft_button'].button_rect.collidepoint(mouse_pos),
-                                    self.settings.topleft_who, self.settings.topleft_active],
-                        'top': [self.buttons['top_button'].button_rect.collidepoint(mouse_pos),
-                                self.settings.top_who, self.settings.top_active],
-                        'topright': [self.buttons['topright_button'].button_rect.collidepoint(mouse_pos),
-                                     self.settings.topright_who, self.settings.topright_active],
-                        'left': [self.buttons['left_button'].button_rect.collidepoint(mouse_pos),
-                                 self.settings.left_who, self.settings.left_active],
-                        'center': [self.buttons['center_button'].button_rect.collidepoint(mouse_pos),
-                                   self.settings.center_who, self.settings.center_active],
-                        'right': [self.buttons['right_button'].button_rect.collidepoint(mouse_pos),
-                                  self.settings.right_who, self.settings.right_active],
-                        'bottomleft': [self.buttons['bottomleft_button'].button_rect.collidepoint(mouse_pos),
-                                       self.settings.bottomright_who, self.settings.bottomright_active],
-                        'bottom': [self.buttons['bottom_button'].button_rect.collidepoint(mouse_pos),
-                                   self.settings.bottom_who, self.settings.bottom_active],
-                        'bottomright': [self.buttons['bottomright_button'].button_rect.collidepoint(mouse_pos),
-                                        self.settings.bottomleft_who, self.settings.bottomleft_active]}
-        for i in stats_button:
-            if stats_button[i][0] and stats_button[i][2]:
-                print(stats_button[i][0], stats_button[i][1], stats_button[i][2])
-                stats_button[i][1] = self.who
-                self.whose_move()
-                stats_button[i][2] = False
-                print(stats_button[i][0], stats_button[i][1], stats_button[i][2])
-                print(self.settings.bottomright_who, self.settings.bottomright_active)'''
+'''class Engine:
+    def __init__(self):
+        print(f'Engine {id(self)} was created')
+
+    def work(self):
+        print(f'Engine {id(self)} is working')
+
+
+class Wheel:
+    def __init__(self):
+        print(f'Wheel {id(self)} was created')
+
+    def spin(self):
+        print(f'Wheel {id(self)} is spinning')
+
+
+class Vehicle:
+    def __init__(self):
+        self.engine = Engine()
+        self.wheels = [Wheel(), Wheel(), Wheel(), Wheel()]
+        print(f'{self.__class__} {id(self)} was created')
+
+    def ride(self):
+        print(f'{self.__class__} {id(self)} is ridding')
+        self.engine.work()
+        for wheel in self.wheels:
+            wheel.spin()
 
-'''def check_mouse_events(self, mouse_pos):
-        topleft_clicked = self.buttons['topleft_button'].button_rect.collidepoint(mouse_pos)
-        top_clicked = self.buttons['top_button'].button_rect.collidepoint(mouse_pos)
-        topright_clicked = self.buttons['topright_button'].button_rect.collidepoint(mouse_pos)
-        left_clicked = self.buttons['left_button'].button_rect.collidepoint(mouse_pos)
-        center_clicked = self.buttons['center_button'].button_rect.collidepoint(mouse_pos)
-        right_clicked = self.buttons['right_button'].button_rect.collidepoint(mouse_pos)
-        bottomleft_clicked = self.buttons['bottomleft_button'].button_rect.collidepoint(mouse_pos)
-        bottom_clicked = self.buttons['bottom_button'].button_rect.collidepoint(mouse_pos)
-        bottomright_clicked = self.buttons['bottomright_button'].button_rect.collidepoint(mouse_pos)
 
-        # Topleft button
-        if topleft_clicked and self.settings.topleft_active:
-            self.settings.topleft_who = self.who
-            self.whose_move()
-            self.settings.topleft_active = False
+class TruckBody:
+    def __init__(self, capacity):
+        self.capacity = capacity
+        print(f'TruckBody {id(self)} was created')
+        self.wheels = [Wheel(), Wheel()]
 
-        # Center button
-        if center_clicked and self.settings.center_active:
-            self.settings.center_who = self.who
-            self.whose_move()
-            self.settings.center_active = False
+    @staticmethod
+    def boxes(capacity):
+        return capacity / 10
 
-        # Topright button
-        if topright_clicked and self.settings.topright_active:
-            self.settings.topright_who = self.who
-            self.whose_move()
-            self.settings.topright_active = False
+    def ride(self):
+        boxes = self.boxes(self.capacity)
+        print(f'TruckBody {id(self)} is ridding with {boxes}')
 
-        # Top button
-        if top_clicked and self.settings.top_active:
-            self.settings.top_who = self.who
-            self.whose_move()
-            self.settings.top_active = False
+        for wheel in self.wheels:
+            wheel.spin()
 
-        # Left button
-        if left_clicked and self.settings.left_active:
-            self.settings.left_who = self.who
-            self.whose_move()
-            self.settings.left_active = False
 
-        # Bottomleft button
-        if bottomleft_clicked and self.settings.bottomleft_active:
-            self.settings.bottomleft_who = self.who
-            self.whose_move()
-            self.settings.bottomleft_active = False
+class Truck(Vehicle):
+    def __init__(self, truck_body):
+        super().__init__()
+        self.truck_body = truck_body
 
-        # Bottom button
-        if bottom_clicked and self.settings.bottom_active:
-            self.settings.bottom_who = self.who
-            self.whose_move()
-            self.settings.bottom_active = False
+    def ride(self):
+        super().ride()
+        self.truck_body.ride()
 
-        # Bottomright button
-        if bottomright_clicked and self.settings.bottomright_active:
-            self.settings.bottomright_who = self.who
-            self.whose_move()
-            self.settings.bottomright_active = False
 
-        # Right button
-        if right_clicked and self.settings.right_active:
-            self.settings.right_who = self.who
-            self.whose_move()
-            self.settings.right_active = False'''
+vehicle = Vehicle()
 
 
-'''def buttons_update(self):
-    # Topleft button
-    if not self.settings.topleft_active:
-        if self.settings.topleft_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['topleft_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['topleft_button'].button_rect)
+# vehicle.ride()
+# truck_body = TruckBody(500)
+# truck = Truck(truck_body)
+# truck.ride()
 
-    # Top button
-    if not self.settings.top_active:
-        if self.settings.top_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['top_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['top_button'].button_rect)
+class C():
+    a = 2
 
-    # Topright button
-    if not self.settings.topright_active:
-        if self.settings.topright_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['topright_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['topright_button'].button_rect)
+    def hello_instance(self):
+        print(f'hello from {self.__class__}', self.a)
 
-    # Left button
-    if not self.settings.left_active:
-        if self.settings.left_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['left_button'].button_rect)
+    @staticmethod
+    def hello_staic():
+        print(f'hello from static')
+
+    @classmethod
+    def hello_class(cls):
+        print(f'hello from {cls.__str__()}', cls.a)
+
+
+'''
+
+
+'''class Employee:
+    def __init__(self, name, exp, age):
+        self.name = name
+        self.exp = exp
+        self.age = age
+
+
+class Teacher(Employee):
+    def __init__(self, name, exp, age, specialisation):
+        super().__init__(name, exp, age)
+        self.specialisation = specialisation
+
+    def teach(self, unit):
+        if len(unit.list_of_students) > 0:
+            print(f"{self.name} is teaching {self.specialisation} to {unit.id}.")
         else:
-            self.screen.blit(self.cross.image, self.buttons['left_button'].button_rect)
+            print(f"{unit.id} unit is empty")
+
+
+class Unit:
+    def __init__(self, id, list_of_students: list):
+        self.id = id
+        self.list_of_students = list_of_students
+        
+    def learning(self, teacher):
+        print(f'{self.id} unit attentively listens to the {teacher.name} and teaches {teacher.specialisation}.')
+
 
-    # Center button
-    if not self.settings.center_active:
-        if self.settings.center_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['center_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['center_button'].button_rect)
+class Staff(Employee):
+    def __init__(self, name, exp, age, specialisation):
+        super().__init__(name, exp, age)
+        self.specialisation = specialisation
+
+    def work(self):
+        print(f'{self.name} is working as a {self.specialisation}')
+
+
+class Student:
+    def __init__(self, name, age):
+        self.name = name
+        self.age = age
+        
+
+class School:
+    def __init__(self):
+        self.employee = Employee()
+        self.students = []
+
+        for i in range(20):
+            self.students.append(Student(input("Student's grade: "), input("\nStudent's age: "), input("\nStudent's gender: ")))
+
+        self.classrooms = {}
+        for i in self.students:
+            if i.grade not in self.classrooms:
+                self.classrooms.update({i.grade: 1})
+            else:
+                self.classrooms[i.grade] += 1
+
+
+student_1 = Student('vasya', 10)
+student_2 = Student('misha', 11)
+teacher = Teacher('maria petrovna', 5, 35, 'math')
+staff = Staff('Grisha', 10, 40, 'cleaner')
+unit = Unit('5', [student_1, student_2])
+teacher.teach(unit)
+staff.work()
+unit.learning(teacher)'''
+
+
+class Person:
+    def __init__(self, name: str, age: int):
+        self.name = name
+        self.age = age
 
-    # Right button
-    if not self.settings.right_active:
-        if self.settings.right_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['right_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['right_button'].button_rect)
+
+class Doctor(Person):
+    def __init__(self, name: str, age: int, specialisation: str):
+        super().__init__(name, age)
+        self.specialisation = specialisation
+        self.patients = []
+        self.diseases = {'surgeon': ['fracture'], 'infectiologist': ['infection']}
+
+    def set_patients(self, patients: list):
+        for patient in patients:
+            if patient.disease in self.diseases[self.specialisation] and patient.doctor is None:
+                self.patients.append(patient)
+                patient.doctor = self
+            else:
+                print(f"{self.name} can't cure a {patient.disease}, because he has a different specialisation "
+                      f"or is this patient being treated by another doctor.")
+
+    def get_patients(self):
+        if self.patients:
+            return f'{self.name} treating doctor of {[patient.name for patient in self.patients]}.'
+        return f'{self.name} has no patients.'
 
-    # Bottomleft button
-    if not self.settings.bottomleft_active:
-        if self.settings.bottomleft_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['bottomleft_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['bottomleft_button'].button_rect)
-
-    # Bottom button
-    if not self.settings.bottom_active:
-        if self.settings.bottom_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['bottom_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['bottom_button'].button_rect)
+
+class Ward:
+    def __init__(self, id: int):
+        self.id = id
+        self.patients = {}
+
+    def set_patients(self, *patients):
+        for patient in patients:
+            if not self.patients:
+                self.patients.update({patient: patient.disease})
+            else:
+                if patient.disease in str(self.patients.values()):
+                    self.patients.update({patient: patient.disease})
+                else:
+                    print(f"{patient.name} with {patient.disease} can't lie in ward {self.id}.")
+
+    def number_patients(self):
+        return f'In ward {self.id} - {len(self.patients)} patients.'
 
-    # Bottomright button
-    if not self.settings.bottomright_active:
-        if self.settings.bottomright_who == self.zero:
-            self.screen.blit(self.zero.image, self.buttons['bottomright_button'].button_rect)
-        else:
-            self.screen.blit(self.cross.image, self.buttons['bottomright_button'].button_rect)'''
+
+class Patient(Person):
+    def __init__(self, name, age, disease):
+        super().__init__(name, age)
+        self.disease = disease
+        self.doctor = None
+
+    def get_doctor(self):
+        return f'For {self.name}, the treating doctor {self.doctor.name}.'
+
+
+patient_1 = Patient('Nazarov Ivan Urevich', 14, 'fracture')
+patient_2 = Patient('Pleshkov Ivan', 17, 'fracture')
+patient_3 = Patient('Korgin Anton', 13, 'infection')
+doctor_1 = Doctor('Nikita Nikolaevich', 30, 'surgeon')
+doctor_2 = Doctor('Ivanov Ivan Ivanovich', 30, 'surgeon')
+ward = Ward(4)
+doctor_1.set_patients([patient_1, patient_2])
+print(patient_1.get_doctor())
+print(patient_2.get_doctor())
+print(doctor_1.get_patients())
Index: ../Tic-Tac-Toe/button.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame.font\r\nfrom settings import Settings\r\n\r\n\r\nclass Button:\r\n    \"\"\"Характеристики всех кнопок.\"\"\"\r\n    def __init__(self, t_game, x, y, rect_w, rect_h):\r\n        self.settings = Settings()\r\n        self.screen = t_game.screen\r\n        self.button_color = self.settings.button_color\r\n        self.button_active = self.settings.button_active\r\n        self.button = self.settings.button\r\n        self.who = self.settings.who\r\n        self.rect = pygame.Rect(x, y, rect_w, rect_h)\r\n\r\n    def draw_button(self):\r\n        self.button.fill(self.button_color)\r\n        self.screen.blit(self.button, self.rect)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Tic-Tac-Toe/button.py b/../Tic-Tac-Toe/button.py
--- a/../Tic-Tac-Toe/button.py	
+++ b/../Tic-Tac-Toe/button.py	
@@ -16,3 +16,21 @@
     def draw_button(self):
         self.button.fill(self.button_color)
         self.screen.blit(self.button, self.rect)
+
+
+class PlayButton(Button):
+    def __init__(self, t_game, x, y, rect_w, rect_h, msg):
+        super().__init__(t_game, x, y, rect_w, rect_h)
+        self.button_color = (0, 255, 0)
+        self.button = pygame.Surface((200, 50))
+        self.text_color = (255, 255, 255)
+        self.font = pygame.font.SysFont(None, 48)
+        self.rect.center = self.screen.get_rect().center
+
+        self.msg_image = self.font.render(msg, True, self.text_color, self.button_color)
+        self.msg_image_rect = self.msg_image.get_rect()
+        self.msg_image_rect.center = self.rect.center
+
+    def draw_button(self):
+        self.screen.fill(self.button_color, self.rect)
+        self.screen.blit(self.msg_image, self.msg_image_rect)
Index: ../Tic-Tac-Toe/tic-tac-toe.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nfrom time import sleep\r\nfrom random import choice\r\nimport pygame\r\n\r\nfrom settings import Settings\r\nfrom field import Field\r\nfrom button import Button\r\nfrom zero import Zero\r\nfrom cross import Cross\r\n\r\n\r\nclass TicTacToe:\r\n    \"\"\"Основной класс игры.\"\"\"\r\n\r\n    def __init__(self):\r\n        pygame.init()\r\n        self.settings = Settings()\r\n        # Экран\r\n        self.screen = pygame.display.set_mode((1280, 800))\r\n        self.screen_width = self.settings.screen_width\r\n        self.screen_height = self.settings.screen_height\r\n        pygame.display.set_caption('Tic-Tac_Toe')\r\n\r\n        self.zero = Zero(self)\r\n        self.cross = Cross(self)\r\n        self.who = choice((self.zero, self.cross))\r\n        self.field = Field(self)\r\n\r\n        self.buttons = {'topleft_button': Button(self, 446, 205, 125, 125),\r\n                        'top_button': Button(self, 577, 205, 125, 125),\r\n                        'topright_button': Button(self, 705, 205, 125, 125),\r\n                        'left_button': Button(self, 446, 336, 125, 125),\r\n                        'center_button': Button(self, 577, 336, 125, 125),\r\n                        'right_button': Button(self, 705, 336, 125, 125),\r\n                        'bottomleft_button': Button(self, 446, 466, 125, 125),\r\n                        'bottom_button': Button(self, 577, 466, 125, 125),\r\n                        'bottomright_button': Button(self, 705, 466, 125, 125)\r\n                        }\r\n\r\n    def run_game(self):\r\n        \"\"\"Основной цикл игры.\"\"\"\r\n        while True:\r\n            self.check_events()\r\n            self.update_screen()\r\n\r\n    def whose_move(self):\r\n        if self.who == self.cross:\r\n            self.who = self.zero\r\n        else:\r\n            self.who = self.cross\r\n\r\n    def victory_condition(self):\r\n        win_positions = [[self.buttons['topleft_button'].who, self.buttons['top_button'].who, self.buttons['topright_button'].who],\r\n                         [self.buttons['left_button'].who, self.buttons['center_button'].who, self.buttons['right_button'].who],\r\n                         [self.buttons['bottomleft_button'].who, self.buttons['bottom_button'].who, self.buttons['bottomright_button'].who],\r\n                         [self.buttons['topleft_button'].who, self.buttons['left_button'].who, self.buttons['bottomleft_button'].who],\r\n                         [self.buttons['top_button'].who, self.buttons['center_button'].who, self.buttons['bottom_button'].who],\r\n                         [self.buttons['topright_button'].who, self.buttons['center_button'].who, self.buttons['bottomleft_button'].who],\r\n                         [self.buttons['topleft_button'].who, self.buttons['center_button'].who, self.buttons['bottomright_button'].who],\r\n                         [self.buttons['topright_button'].who, self.buttons['center_button'].who, self.buttons['bottomleft_button'].who]]\r\n        my_positions = []\r\n\r\n        for positions in win_positions:\r\n            for position in positions:\r\n                if position == self.who:\r\n                    my_positions.append(position)\r\n                    if my_positions in win_positions:\r\n                        sys.exit()\r\n\r\n    def check_events(self):\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT or event.type == pygame.KEYUP and event.key == pygame.K_q:\r\n                sys.exit()\r\n            elif event.type == pygame.MOUSEBUTTONDOWN:\r\n                mouse_pos = pygame.mouse.get_pos()\r\n                self.check_mouse_events(mouse_pos)\r\n\r\n    def check_mouse_events(self, mouse_pos):\r\n        for i in self.buttons:\r\n            if self.buttons[i].rect.collidepoint(mouse_pos) and self.buttons[i].button_active:\r\n                self.buttons[i].who = self.who\r\n                self.whose_move()\r\n                self.buttons[i].button_active = False\r\n\r\n    def buttons_update(self):\r\n        for i in self.buttons:\r\n            if not self.buttons[i].button_active:\r\n                if self.buttons[i].who == self.zero:\r\n                    self.screen.blit(self.zero.image, self.buttons[i].rect)\r\n                else:\r\n                    self.screen.blit(self.cross.image, self.buttons[i].rect)\r\n\r\n    def update_screen(self):\r\n        \"\"\"Обновляет изображения на экране и отображает новый экран.\"\"\"\r\n        self.screen.fill(self.settings.screen_color)\r\n        self.field.update()\r\n        for button in self.buttons:\r\n            self.buttons[button].draw_button()\r\n        self.buttons_update()\r\n\r\n        pygame.display.flip()\r\n\r\n\r\nif __name__ == '__main__':\r\n    t_game = TicTacToe()\r\n    t_game.run_game()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../Tic-Tac-Toe/tic-tac-toe.py b/../Tic-Tac-Toe/tic-tac-toe.py
--- a/../Tic-Tac-Toe/tic-tac-toe.py	
+++ b/../Tic-Tac-Toe/tic-tac-toe.py	
@@ -1,11 +1,10 @@
 import sys
-from time import sleep
 from random import choice
 import pygame
 
 from settings import Settings
 from field import Field
-from button import Button
+from button import Button, PlayButton
 from zero import Zero
 from cross import Cross
 
@@ -20,13 +19,12 @@
         self.screen = pygame.display.set_mode((1280, 800))
         self.screen_width = self.settings.screen_width
         self.screen_height = self.settings.screen_height
-        pygame.display.set_caption('Tic-Tac_Toe')
+        pygame.display.set_caption('Tic-Tac-Toe')
 
         self.zero = Zero(self)
         self.cross = Cross(self)
         self.who = choice((self.zero, self.cross))
         self.field = Field(self)
-
         self.buttons = {'topleft_button': Button(self, 446, 205, 125, 125),
                         'top_button': Button(self, 577, 205, 125, 125),
                         'topright_button': Button(self, 705, 205, 125, 125),
@@ -37,11 +35,13 @@
                         'bottom_button': Button(self, 577, 466, 125, 125),
                         'bottomright_button': Button(self, 705, 466, 125, 125)
                         }
+        self.play_button = PlayButton(self, 0, 0, 200, 50, 'Play')
 
     def run_game(self):
         """Основной цикл игры."""
         while True:
             self.check_events()
+            self.victory_condition()
             self.update_screen()
 
     def whose_move(self):
@@ -56,9 +56,9 @@
                          [self.buttons['bottomleft_button'].who, self.buttons['bottom_button'].who, self.buttons['bottomright_button'].who],
                          [self.buttons['topleft_button'].who, self.buttons['left_button'].who, self.buttons['bottomleft_button'].who],
                          [self.buttons['top_button'].who, self.buttons['center_button'].who, self.buttons['bottom_button'].who],
+                         [self.buttons['topright_button'].who, self.buttons['right_button'].who, self.buttons['bottomright_button'].who],
                          [self.buttons['topright_button'].who, self.buttons['center_button'].who, self.buttons['bottomleft_button'].who],
-                         [self.buttons['topleft_button'].who, self.buttons['center_button'].who, self.buttons['bottomright_button'].who],
-                         [self.buttons['topright_button'].who, self.buttons['center_button'].who, self.buttons['bottomleft_button'].who]]
+                         [self.buttons['topleft_button'].who, self.buttons['center_button'].who, self.buttons['bottomright_button'].who]]
         my_positions = []
 
         for positions in win_positions:
Index: space_tracking.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from random import randint\r\n\r\nROWS = 10  # Кол-во строк\r\nCOLUMNS = 10  # Кол-во столбцов\r\n\r\n\r\nclass Player:\r\n    def __init__(self, name: str):\r\n        self.name = name\r\n        self.money = 2000000\r\n\r\n    def buy_ship(self, ship, planet):\r\n        pass\r\n\r\n\r\nclass Engine:\r\n    def __init__(self, power: int, weight: int):\r\n        self.power = power\r\n        self.weight = weight\r\n\r\n\r\nclass Tank:\r\n    def __init__(self, capacity: int, weight: int):\r\n        self.capacity = capacity\r\n        self.fuel = 0\r\n        self.weight = weight\r\n\r\n\r\nclass StarShip:\r\n    def __init__(self, name: str, capacity: int, location, engine, tank):\r\n        self.name = name\r\n        self.location = location\r\n        self.engine = engine\r\n        self.tank = tank\r\n        self.capacity = capacity\r\n        self.cargo = {'Minerals': 0,\r\n                      'Medicines': 0,\r\n                      'Food': 0,\r\n                      'Materials': 0,\r\n                      'Appliances': 0,\r\n                      'Technic': 0,\r\n                      'Luxuries': 0\r\n                      }\r\n\r\n    @property\r\n    def current_capacity(self) -> int:\r\n        return sum([self.cargo.values()])\r\n\r\n    def get_distance(self, planet) -> int:\r\n        distance = round(((planet.coord[0] - self.location.coord[0]) ** 2 + (\r\n                planet.coord[1] - self.location.coord[1]) ** 2) ** 0.5)\r\n        return distance\r\n\r\n    def move_to_planet(self, planet):\r\n        if planet != self.location:\r\n            distance = self.get_distance(planet)\r\n            if distance * self.engine.power > self.tank.fuel:\r\n                print('Вы не можете полететь на эту планету, так как у вас не хватает топлива.')\r\n            elif distance * self.engine.power <= self.tank.fuel:\r\n                self.location = planet\r\n                self.tank.fuel -= distance * self.engine.power\r\n                print(f'Вы прибыли на планету {planet.name}')\r\n        else:\r\n            print('Вы уже находитесь на этой планете.')\r\n\r\n    def refuel(self, fuel: int):\r\n        if type(fuel) is int:\r\n            if fuel > 0:\r\n                if fuel * self.location.stock.products['Fuel'][1] <= player.money:\r\n                    if fuel <= self.location.stock.products['Fuel'][0]:\r\n                        if fuel + self.tank.fuel > self.tank.capacity:\r\n                            self.tank.fuel += self.tank.capacity - self.tank.fuel\r\n                        else:\r\n                            self.tank.fuel += fuel\r\n                        self.location.stock.products['Fuel'][0] -= fuel\r\n                        player.money -= self.location.stock.products['Fuel'][1] * fuel\r\n                    else:\r\n                        print(\r\n                            f\"{fuel} топлива нет на складе. На складе {self.location.stock.products['Fuel'][0]} \"\r\n                            f\"топлива.\"\r\n                        )\r\n                else:\r\n                    print(f'У вас не хватает денег, чтобы заправить {fuel} топлива.')\r\n            else:\r\n                print('Введите положительное значение.')\r\n        else:\r\n            print('Введите числовое значение.')\r\n\r\n    def buy(self, product: str, amount: int):\r\n        if product.title() in self.cargo:\r\n            product = product.title()\r\n            if type(amount) is int:\r\n                if amount > 0:\r\n                    if self.location.stock.products[product][0] > 0:\r\n                        if self.location.stock.products[product][0] >= amount:\r\n                            if player.money >= self.location.stock.products[product][1] * amount:\r\n                                self.location.stock.products[product][0] -= amount\r\n                                self.cargo[product] += amount\r\n                                player.money -= self.location.stock.products[product][1] * amount\r\n                            else:\r\n                                print(f'У вас не хватает денег, чтобы купить {amount} {product.lower()}.')\r\n                        else:\r\n                            print(f'{amount} {product.lower()} нет на складе. На складе '\r\n                                  f'{self.location.stock.products[product][0]} {product.lower()}')\r\n                    else:\r\n                        print(f'Товар {product.lower()} закончился.')\r\n                else:\r\n                    print('Введите положительное значение.')\r\n            else:\r\n                print('Введите числовое значение.')\r\n        else:\r\n            print('Такого продукта нет.')\r\n\r\n    def sale(self, product: str, amount: int):\r\n        if product.title() in self.cargo:\r\n            product = product.title()\r\n            if type(amount) is int:\r\n                if amount > 0:\r\n                    if self.cargo[product] >= amount:\r\n                        self.cargo[product] -= amount\r\n                        self.location.stock.products[product][0] += amount\r\n                        player.money += self.location.stock.products[product][1] * amount\r\n                    else:\r\n                        print(f'У вас есть только {self.cargo[product]} {product.lower()}')\r\n                else:\r\n                    print('Введите положительное значение.')\r\n            else:\r\n                print('Введите числовое значение.')\r\n        else:\r\n            print('Такого продукта нет.')\r\n\r\n\r\nclass Stock:\r\n    def __init__(self):\r\n        self.products = {'Food': [100, 10],\r\n                         'Minerals': [1000, 20],\r\n                         'Medicines': [100, 30],\r\n                         'Materials': [100, 100],\r\n                         'Fuel': [1000, 10],\r\n                         'Appliances': [100, 50],\r\n                         'Technic': [100, 80],\r\n                         'Luxuries': [100, 100]\r\n                         }  # (0 - кол-во, 0 - цена)\r\n\r\n    def increase_products(self, product: str, quantity: int):\r\n        self.products[product][0] += quantity\r\n\r\n    def new_price(self, product: str, price: int):\r\n        self.products[product][1] = price\r\n\r\n\r\nclass Shop:\r\n    def __init__(self):\r\n        self.ships = []\r\n        self.engines = []\r\n        self.tanks = []\r\n\r\n\r\nclass Planet:\r\n    def __init__(self, name: str, planet_type: str):\r\n        self.name = name\r\n        self.planet_type = planet_type\r\n        self.stock = Stock()\r\n        self.shop = Shop()\r\n        self.coord = self.__generate_coord()\r\n\r\n    def __count_planets(self) -> int:\r\n        count = 0\r\n        for i in range(ROWS):\r\n            for j in range(COLUMNS):\r\n                if [i, j] not in planets_coord:\r\n                    count += 1\r\n        return count\r\n\r\n    def __generate_coord(self) -> tuple:\r\n        while self.__count_planets() <= ROWS * COLUMNS:\r\n            x, y = randint(0, ROWS - 1), randint(0, COLUMNS - 1)\r\n            if [x, y] in planets_coord:\r\n                continue\r\n            planets_coord.append([x, y])\r\n            return x, y\r\n\r\n    def get_prices(self) -> dict:\r\n        prices = {}\r\n        for i in self.stock.products:\r\n            prices.update({i: self.stock.products[i][1]})\r\n        return prices\r\n\r\n\r\nplanets_coord = []\r\nplanet1 = Planet('Auropa', 'None')\r\nplanet2 = Planet('Earth', 'None')\r\nplanet3 = Planet('Mars', 'None')\r\nplayer = Player('Ivan')\r\nengine = Engine(2, 50)\r\ntank = Tank(100, 50)\r\nstar_ship = StarShip('Buran', 100, planet2, engine, tank)\r\nprint(star_ship.tank.fuel, 'Топливо')\r\nprint(player.money)\r\nprint(planet2.stock.products['Fuel'], 'Топливо на складе')\r\nstar_ship.refuel(1000)\r\nprint(player.money)\r\nprint(planet2.stock.products['Fuel'], 'Топливо на складе')\r\nprint(star_ship.tank.fuel, 'Топливо')\r\nprint(star_ship.get_distance(planet1), 'Расстояние')\r\nstar_ship.move_to_planet(planet1)\r\nprint(star_ship.tank.fuel, 'Топливо после перелёта на др. планету')\r\nstar_ship.refuel(10)\r\nprint(star_ship.tank.fuel, 'Топливо после заправки')\r\nprint(planet1.stock.products['Fuel'], 'Топливо на складе')\r\nprint(planet1.stock.products['Food'], 'Еда на складе')\r\nprint(player.money, 'Деньги игрока')\r\nprint(star_ship.cargo['Food'], 'Еда у игрока')\r\nstar_ship.buy('food', 10)\r\nprint('Купил еду')\r\nprint(player.money, 'Деньги игрока после покупки еды')\r\nprint(planet1.stock.products['Food'], 'Еда на складе после покупки')\r\nprint(star_ship.cargo['Food'], 'Еда у игрока после покупки')\r\nstar_ship.sale('food', 1)\r\nprint('Продал еду')\r\nprint(planet1.stock.products['Food'], 'Еда на складе после продажи')\r\nprint(star_ship.cargo['Food'], 'Еда у игрока после продажи')\r\nprint(player.money, 'Деньги игрока после продажи еды')\r\n
===================================================================
diff --git a/space_tracking.py b/space_tracking.py
--- a/space_tracking.py	
+++ b/space_tracking.py	
@@ -1,50 +1,46 @@
 from random import randint
 
-ROWS = 10  # Кол-во строк
-COLUMNS = 10  # Кол-во столбцов
+N, M = 10, 10
 
 
 class Player:
     def __init__(self, name: str):
         self.name = name
-        self.money = 2000000
+        self.money = 2000
 
     def buy_ship(self, ship, planet):
         pass
 
 
 class Engine:
-    def __init__(self, power: int, weight: int):
+    def __init__(self, power=None, weight=None):
         self.power = power
         self.weight = weight
 
 
 class Tank:
-    def __init__(self, capacity: int, weight: int):
+    def __init__(self, capacity=None, weight=None):
         self.capacity = capacity
-        self.fuel = 0
+        self.fuel = self.capacity
         self.weight = weight
 
 
 class StarShip:
-    def __init__(self, name: str, capacity: int, location, engine, tank):
+    def __init__(self, name: str, capacity: int, location, engine=Engine(), tank=Tank()):
         self.name = name
         self.location = location
         self.engine = engine
         self.tank = tank
         self.capacity = capacity
-        self.cargo = {'Minerals': 0,
-                      'Medicines': 0,
-                      'Food': 0,
-                      'Materials': 0,
-                      'Appliances': 0,
-                      'Technic': 0,
-                      'Luxuries': 0
-                      }
-
-    @property
-    def current_capacity(self) -> int:
-        return sum([self.cargo.values()])
+        self.compartment = {'Минералы': 0,
+                            'Медикаменты': 0,
+                            'Еда': 0,
+                            'Материалы': 0,
+                            'Бытовая техника': 0,
+                            'Промышленная техника': 0,
+                            'Предметы роскоши': 0
+                            }
+        self.current_capacity = sum([self.compartment[i] for i in self.compartment])
 
     def get_distance(self, planet) -> int:
         distance = round(((planet.coord[0] - self.location.coord[0]) ** 2 + (
@@ -54,9 +50,9 @@
     def move_to_planet(self, planet):
         if planet != self.location:
             distance = self.get_distance(planet)
-            if distance * self.engine.power > self.tank.fuel:
+            if distance > self.tank.capacity:
                 print('Вы не можете полететь на эту планету, так как у вас не хватает топлива.')
-            elif distance * self.engine.power <= self.tank.fuel:
+            elif distance <= self.tank.capacity:
                 self.location = planet
                 self.tank.fuel -= distance * self.engine.power
                 print(f'Вы прибыли на планету {planet.name}')
@@ -65,29 +61,29 @@
 
     def refuel(self, fuel: int):
         if type(fuel) is int:
-            if fuel > 0:
-                if fuel * self.location.stock.products['Fuel'][1] <= player.money:
-                    if fuel <= self.location.stock.products['Fuel'][0]:
+            if fuel * self.location.stock.products['Топливо'][1] <= player.money:
+                if fuel > 0:
+                    if fuel > self.location.stock.products['Топливо'][0]:
+                        print(
+                            f"{fuel} топлива нет на складе. На складе {self.location.stock.products['Топливо'][0]} "
+                            f"топлива."
+                        )
+                    else:
                         if fuel + self.tank.fuel > self.tank.capacity:
                             self.tank.fuel += self.tank.capacity - self.tank.fuel
                         else:
                             self.tank.fuel += fuel
-                        self.location.stock.products['Fuel'][0] -= fuel
-                        player.money -= self.location.stock.products['Fuel'][1] * fuel
-                    else:
-                        print(
-                            f"{fuel} топлива нет на складе. На складе {self.location.stock.products['Fuel'][0]} "
-                            f"топлива."
-                        )
-                else:
-                    print(f'У вас не хватает денег, чтобы заправить {fuel} топлива.')
-            else:
-                print('Введите положительное значение.')
+                        self.location.stock.products['Топливо'][0] -= fuel
+                        player.money -= self.location.stock.products['Топливо'][1] * fuel
+                else:
+                    print('Введите положительное значение.')
+            else:
+                print(f'У вас не хватает денег, чтобы заправить {fuel} топлива.')
         else:
             print('Введите числовое значение.')
 
     def buy(self, product: str, amount: int):
-        if product.title() in self.cargo:
+        if product.title() in self.compartment:
             product = product.title()
             if type(amount) is int:
                 if amount > 0:
@@ -95,7 +91,7 @@
                         if self.location.stock.products[product][0] >= amount:
                             if player.money >= self.location.stock.products[product][1] * amount:
                                 self.location.stock.products[product][0] -= amount
-                                self.cargo[product] += amount
+                                self.compartment[product] += amount
                                 player.money -= self.location.stock.products[product][1] * amount
                             else:
                                 print(f'У вас не хватает денег, чтобы купить {amount} {product.lower()}.')
@@ -112,16 +108,16 @@
             print('Такого продукта нет.')
 
     def sale(self, product: str, amount: int):
-        if product.title() in self.cargo:
+        if product.title() in self.compartment:
             product = product.title()
             if type(amount) is int:
                 if amount > 0:
-                    if self.cargo[product] >= amount:
-                        self.cargo[product] -= amount
+                    if self.compartment[product] >= amount:
+                        self.compartment[product] -= amount
                         self.location.stock.products[product][0] += amount
                         player.money += self.location.stock.products[product][1] * amount
                     else:
-                        print(f'У вас есть только {self.cargo[product]} {product.lower()}')
+                        print(f'У вас есть только {self.compartment[product]} {product.lower()}')
                 else:
                     print('Введите положительное значение.')
             else:
@@ -132,14 +128,14 @@
 
 class Stock:
     def __init__(self):
-        self.products = {'Food': [100, 10],
-                         'Minerals': [1000, 20],
-                         'Medicines': [100, 30],
-                         'Materials': [100, 100],
-                         'Fuel': [1000, 10],
-                         'Appliances': [100, 50],
-                         'Technic': [100, 80],
-                         'Luxuries': [100, 100]
+        self.products = {'Еда': [100, 10],
+                         'Минералы': [1000, 20],
+                         'Медикаменты': [100, 30],
+                         'Материалы': [100, 100],
+                         'Топливо': [1000, 10],
+                         'Бытовая техника': [100, 50],
+                         'Промышленная техника': [100, 80],
+                         'Предметы роскоши': [100, 100]
                          }  # (0 - кол-во, 0 - цена)
 
     def increase_products(self, product: str, quantity: int):
@@ -164,21 +160,31 @@
         self.shop = Shop()
         self.coord = self.__generate_coord()
 
-    def __count_planets(self) -> int:
+    def __count_freespace(self) -> int:
         count = 0
-        for i in range(ROWS):
-            for j in range(COLUMNS):
-                if [i, j] not in planets_coord:
+        for i in range(N):
+            for j in range(M):
+                if not self.__check_planets(i, j):
                     count += 1
         return count
 
+    def __check_planets(self, x: int, y: int) -> bool:
+        for i in range(-1, 2):
+            for j in range(-1, 2):
+                if 0 <= x + i < N and 0 <= y + j < M and not (i == 0 and j == 0) \
+                        and [x + i, y + j] in planets_coord:
+                    return True
+        return False
+
     def __generate_coord(self) -> tuple:
-        while self.__count_planets() <= ROWS * COLUMNS:
-            x, y = randint(0, ROWS - 1), randint(0, COLUMNS - 1)
-            if [x, y] in planets_coord:
-                continue
-            planets_coord.append([x, y])
-            return x, y
+        if self.__count_freespace() > 1:
+            while True:
+                x, y = randint(0, N - 1), randint(0, M - 1)
+                if [x, y] in planets_coord:
+                    continue
+                if not self.__check_planets(x, y):
+                    planets_coord.append([x, y])
+                    return x, y
 
     def get_prices(self) -> dict:
         prices = {}
@@ -192,32 +198,25 @@
 planet2 = Planet('Earth', 'None')
 planet3 = Planet('Mars', 'None')
 player = Player('Ivan')
-engine = Engine(2, 50)
+engine = Engine(1, 50)
 tank = Tank(100, 50)
 star_ship = StarShip('Buran', 100, planet2, engine, tank)
 print(star_ship.tank.fuel, 'Топливо')
-print(player.money)
-print(planet2.stock.products['Fuel'], 'Топливо на складе')
-star_ship.refuel(1000)
-print(player.money)
-print(planet2.stock.products['Fuel'], 'Топливо на складе')
-print(star_ship.tank.fuel, 'Топливо')
-print(star_ship.get_distance(planet1), 'Расстояние')
 star_ship.move_to_planet(planet1)
 print(star_ship.tank.fuel, 'Топливо после перелёта на др. планету')
 star_ship.refuel(10)
 print(star_ship.tank.fuel, 'Топливо после заправки')
-print(planet1.stock.products['Fuel'], 'Топливо на складе')
-print(planet1.stock.products['Food'], 'Еда на складе')
+print(planet1.stock.products['Топливо'], 'Топливо на складе')
+print(planet1.stock.products['Еда'], 'Еда на складе')
 print(player.money, 'Деньги игрока')
-print(star_ship.cargo['Food'], 'Еда у игрока')
-star_ship.buy('food', 10)
+print(star_ship.compartment['Еда'], 'Еда у игрока')
+star_ship.buy('еда', 10)
 print('Купил еду')
 print(player.money, 'Деньги игрока после покупки еды')
-print(planet1.stock.products['Food'], 'Еда на складе после покупки')
-print(star_ship.cargo['Food'], 'Еда у игрока после покупки')
-star_ship.sale('food', 1)
+print(planet1.stock.products['Еда'], 'Еда на складе после покупки')
+print(star_ship.compartment['Еда'], 'Еда у игрока после покупки')
+star_ship.sale('еда', 1)
 print('Продал еду')
-print(planet1.stock.products['Food'], 'Еда на складе после продажи')
-print(star_ship.cargo['Food'], 'Еда у игрока после продажи')
+print(planet1.stock.products['Еда'], 'Еда на складе после продажи')
+print(star_ship.compartment['Еда'], 'Еда у игрока после продажи')
 print(player.money, 'Деньги игрока после продажи еды')
